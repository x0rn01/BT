buildscript {
    ext.buildNum = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone('UTC'))
    ext.vertx_version = '3.6.3'
    ext.hazelcast_version = '3.11.2'
    ext.log4j2_version = '2.11.2'
    ext.spring_version = '5.1.5.RELEASE'
    ext.metrics_version = '4.0.5'
    ext.http4k_version = '3.114.0'
    ext.junit_version = '5.4.0'
    ext.jetty_version = '9.4.15.v20190215'
    ext.slf4j_version = '1.7.26'

//  ext.jdk_version = JavaVersion.VERSION_1_8
    ext.jdk_version = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
        jcenter()
    }
}
plugins {
    id 'io.vertx.vertx-plugin' version '0.3.1'
    id 'org.hidetake.swagger.generator' version '2.16.0'
    id 'org.sonarqube' version '2.7'
    id 'org.hidetake.ssh' version '2.9.0'
    id 'com.adarshr.test-logger' version '1.6.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'se.patrikerdes.use-latest-versions' version '0.2.8'
    id 'org.owasp.dependencycheck' version '4.0.2'
    id 'com.dorongold.task-tree' version '1.3.1'
    id 'nebula.ospackage' version '6.1.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'kotlin'
apply plugin: 'nebula.ospackage-application'
apply plugin: 'application'
apply plugin: 'jacoco'

/*
 * Disable annotation processors on the compile classpath
 * Gradle 5.0 will not honour them and they slow down the build
 */
compileJava.options.compilerArgs += '-proc:none'
compileTestJava.options.compilerArgs += '-proc:none'

group 'com.bt.uta.ipt'

repositories {
    maven { url 'http://nexus.ut.nat.bt.com/repository/maven-public' }
    mavenCentral()
    jcenter()
}

sourceCompatibility = jdk_version
targetCompatibility = jdk_version

tasks.withType(org.gradle.api.tasks.testing.Test).all {
    useJUnitPlatform()
    failFast = false
    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

vertx {
    mainVerticle = 'com.bt.uta.ipt.gecko.GeckoMain'
    vertxVersion = vertx_version
    watch = ['src/main/**/*']
    jvmArgs = [
            '-Dlog4j.configurationFile=file:./etc/dev/log4j2.xml',
//      '-Dlog4j2.debug=true',
            '-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory',
            '-DGECKO_ENV=test'
    ]
}

configurations {
    jolokia
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    compile "io.vertx:vertx-core:$vertx_version"
    compile ("io.vertx:vertx-lang-kotlin:$vertx_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile "io.vertx:vertx-web:$vertx_version"
    compile "io.vertx:vertx-codegen:$vertx_version"

    // CVE-2018-19360, CVE-2018-19361, CVE-2018-19362, CVE-2018-1000873
    compile "com.fasterxml.jackson.core:jackson-core:2.9.8"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.8"
    compile 'javax.xml.bind:jaxb-api:2.2.11'

    compile "io.vertx:vertx-stomp:$vertx_version"
    compile "io.vertx:vertx-dropwizard-metrics:$vertx_version"
    compile ("io.dropwizard.metrics:metrics-json:$metrics_version") {
        exclude group: 'org.slf4j', module: 'slf4j-api' //CVE-2018-8088 for 1.8.0.alpha
    }
    compile ("io.dropwizard.metrics:metrics-jvm:$metrics_version") {
        exclude group: 'org.slf4j', module: 'slf4j-api' //CVE-2018-8088 for 1.8.0.alpha
    }
    compile "org.slf4j:slf4j-api:$slf4j_version" //CVE-2018-8088 for 1.8.0.alpha
    compile "io.vertx:vertx-health-check:$vertx_version"
    compile "com.hazelcast:hazelcast-all:$hazelcast_version"
    compile ('io.vavr:vavr-kotlin:0.10.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile 'org.json:json:20180813'
    compile "org.apache.logging.log4j:log4j-api:$log4j2_version"
    compile "org.apache.logging.log4j:log4j-core:$log4j2_version"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2_version" // intercept use of SLF4j
    compile 'org.javastack:log4j2-simplejson:1.1.0'
    compile 'com.google.code.gson:gson:2.8.5'
    compile('com.github.phiz71:vertx-swagger-router:1.6.0') {
        exclude group: 'io.vertx', module: 'vertx-rx-java'
        exclude group: 'org.slf4j', module: 'slf4j-ext'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    compile ('io.swagger:swagger-parser:1.0.42'){
        exclude group: 'org.slf4j', module: 'slf4j-ext' //CVE-2018-8088 for 1.8.0.alpha
        exclude group: 'org.slf4j', module: 'slf4j-api' //CVE-2018-8088 for 1.8.0.alpha
    }
    compile 'com.google.guava:guava:27.0.1-jre'
    compile ('com.github.salomonbrys.kotson:kotson:2.5.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile ('com.beust:klaxon:5.0.5')  {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile('com.github.tonybaines:gestalt:2.0.17') {
        exclude group: 'org.jetbrains.kotlin'
    }

    compile ("org.http4k:http4k-core:${http4k_version}") {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile ("org.http4k:http4k-client-apache:${http4k_version}") {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile ("org.http4k:http4k-resilience4j:${http4k_version}") {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile 'org.apache.httpcomponents:httpclient:4.5.7'
    compile 'au.com.bytecode:opencsv:2.4'
    compile ('org.funktionale:funktionale-all:1.2') {
        exclude group: 'org.jetbrains.kotlin'
    }
    compile 'com.googlecode.libphonenumber:geocoder:2.112'

    compile "org.springframework:spring-websocket:$spring_version"
    compile "org.springframework:spring-messaging:$spring_version"
    compile 'javax.websocket:javax.websocket-api:1.1'
    compile "org.eclipse.jetty.websocket:websocket-client:$jetty_version"

    // Not needed for compilation, but must be bundled with the RPM distro, so ...
    jolokia 'org.jolokia:jolokia-jvm:1.6.0:agent'

    // junit 5.3.x seems incompatible with IntelliJ test runners!
    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testCompile 'com.natpryce:hamkrest:1.7.0.0'
    testCompile ('io.kotlintest:kotlintest-runner-junit5:3.2.1') {
        exclude group: 'org.junit.platform'
    }
    testCompile 'com.github.kittinunf.fuel:fuel:2.0.1'

    testCompile 'org.apache.tomcat.embed:tomcat-embed-websocket:9.0.16'
    testCompile ('org.awaitility:awaitility-kotlin:3.1.6') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-test-junit'
    }
    testCompile 'com.gregwoodfill.assert:kotlin-json-assert:0.1.0'
    testCompile 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
    testCompile 'org.apache.commons:commons-collections4:4.3'
    testCompile 'org.apache.commons:commons-math3:3.6.1'
    testCompile 'io.swagger:swagger-annotations:1.5.22'
    testCompile 'io.gsonfire:gson-fire:1.8.3'
    testCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    testCompile 'com.github.tomakehurst:wiremock-standalone:2.21.0'
    testCompile 'org.fluttercode.datafactory:datafactory:0.8'
    testCompile 'io.strikt:strikt-core:0.17.3'
    testCompile 'io.strikt:strikt-java-time:0.17.3'
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.4.4'
}

import org.gradle.internal.jvm.Jvm

sourceSets {
    main {
        kotlin {
            srcDir "$buildDir/generated/kotlin"
        }
    }
}

// See https://github.com/nebula-plugins/gradle-ospackage-plugin/wiki/Usage-Example
// for more configuration options
ospackage_application {
    prefix = '/opt/ipt/'
}

ospackage {
    version = project.version
    os = LINUX
    addParentDirs true
    // Assume a shared folder for various utilities
    into "/opt/ipt"
    user 'ipt'
    permissionGroup 'ipt'
    exclude '**/common-build-*'
    from('src/main/scripts') {
        into "/opt/ipt/${project.name}/bin"
        exclude  '**/README'
        exclude  'healthcheck.d'
        fileMode = 0755
    }
    from('src/main/scripts/healthcheck.d') {
        into "/opt/ipt/etc/healthcheck.d"
        exclude  '**/README'
        fileMode = 0755
    }
    from('etc/prod') {
        into "/opt/ipt/${project.name}/etc"
        exclude  'api/tss*.yaml'
        exclude  'api/README-API.adoc'
        fileMode = 0600
    }
    from('build/reports/license') {
        into "/opt/ipt/${project.name}/etc"
        include  '*.html'
        fileMode = 0600
    }
    from (configurations.jolokia) {
        into "/opt/ipt/${project.name}/lib"
    }
}

buildRpm {
    directory("/opt/ipt/${project.name}")
    directory("/opt/ipt/etc/${project.name}")
    directory("/opt/ipt/etc/healthcheck.d")
}
buildRpm.dependsOn('distZip')
//buildRpm.dependsOn('updateProjectVersion')

// Include the artifacts in publishing
plugins.matching { it.class.name == "com.netflix.gradle.plugins.packaging.CommonPackagingPlugin" }.all {
    ospackage {
        vendor = 'BT GS FTS'
    }
}

assemble.dependsOn(buildRpm)
/*
task getNextVersion {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            exec {
                workingDir './src/main/scripts'
                commandLine 'sh', './gecko-versioning.sh'
                standardOutput = os
            }
            ext.result = os.toString().replaceAll("\\n", "")
        }
    }
}

task updateProjectVersion {
    dependsOn getNextVersion
    doLast{
        Properties props = new Properties()
        File propsFile = new File('gradle.properties')
        props.load(propsFile.newDataInputStream())
        props.setProperty('version', getNextVersion.result)
        props.store(propsFile.newWriter(), null)
    }
}*/

/**
 * Publishes an artifact and an MD% digest to a 'raw' nexus repo (i.e. not Maven)
 * Intended to use for RPMs
 */
class NexusUploadTask extends org.gradle.api.DefaultTask {
    @Input
    File artifact
    String root
    String repo
    String publishedName
    String publishedExt

    @TaskAction
    def publish() {
        def artifactBytes = artifact.bytes

        def group = project.group
        def ver = project.version

        def md5 = java.security.MessageDigest
                .getInstance("MD5")
                .digest(artifactBytes)
                .encodeHex().toString()

        def md5File = File.createTempFile(artifact.name, ".md5")
        md5File.text = md5

        def branch = gitBranch()

        upload(artifact, root, repo, group, publishedName, ver, publishedExt, branch)
        upload(md5File, root, repo, group, publishedName, ver, "${publishedExt}.md5", branch)
    }

    def upload(file, root, repo, group, name, ver, ext, branch) {
        def path = "$root/repository/$repo/branches/$branch/$group/$name/$ver/$name-$ver$ext"
        def command = "curl " +
                "-u ${project.properties['nexus.username']}:${project.properties['nexus.password']} " +
                "--upload-file ${file.absolutePath} " +
                "--output /dev/stderr " +
                "--silent " +
                "--write-out %{http_code} " +
                "${path}"

        println command
    }

    def gitBranch() {
        def branch = ""
        def proc = "git rev-parse --abbrev-ref HEAD".execute()
        proc.in.eachLine { line -> branch = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
        return branch
    }
}

task publishRpm(type: NexusUploadTask) {
    root = 'http://nexus.ut.nat.bt.com'
    repo = 'ipt-artifacts'
    artifact = file("$buildDir/distributions/${project.name}-${project.version}.noarch.rpm")
    publishedName = project.name
    publishedExt = '.rpm'
}
publishRpm.dependsOn(buildRpm)


/**
 * Test tasks and config
 */
test {
    reports.junitXml.destination = file("${reporting.baseDir}/test-results/unit")
    reports.html.destination = file("${reporting.baseDir}/test-results/unit/html")
    useJUnitPlatform {
        excludeTags 'Acceptance', 'Integration'
    }
}

task acceptance(type: Test) {
    reports.junitXml.destination = file("${reporting.baseDir}/test-results/acceptance")
    reports.html.destination = file("${reporting.baseDir}/test-results/acceptance/html")
    useJUnitPlatform {
        includeTags 'Acceptance'
    }
}

task integrationTest(type: Test) {
    reports.junitXml.destination = file("${reporting.baseDir}/test-results/integration")
    reports.html.destination = file("${reporting.baseDir}/test-results/integration/html")
    useJUnitPlatform {
        includeTags 'Integration'
    }
}

tasks.withType(Test) {
    systemProperty "http.nonProxyHosts", "localhost|10.10.20.51"
}

def latestRpm() {
    file(project.buildDir.absolutePath + "/distributions")
            .listFiles(new FilenameFilter() {
                @Override
                boolean accept(File dir, String name) {
                    return name.endsWith('.rpm')
                }
            }).sort { it.lastModified() }.last().name
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.jvmTarget = "1.8"
}


import org.gradle.util.GradleVersion

jar {
    // Include the licence information
    from(files("$buildDir/reports/license/dependency-license.html", "$buildDir/reports/license/license-dependency.html")) {
        into("META-INF")
    }

    manifest {
        attributes("Gradle-Version": GradleVersion.current().getVersion())
        attributes("Java-Version": Jvm.current())
        attributes("Built-By": System.getProperty('user.name'))
        attributes("Built-On": new Date().toString())
        attributes("Version": project.version)
        attributes("Build-Number": "${project.ext.buildNum}")
    }
}.dependsOn tasks.downloadLicenses

wrapper {
    gradleVersion = '5.2.1'
    distributionType = Wrapper.DistributionType.ALL
}

ext.updateVersionProperty = { newVersion ->
    Properties props = new Properties()
    File propsFile = new File('gradle.properties')
    props.load(propsFile.newDataInputStream())

    props.setProperty('version', newVersion)
    props.store(propsFile.newWriter(), null)
}

ext.generateReleaseVersion = {
    Properties props = new Properties()
    File propsFile = new File('gradle.properties')
    props.load(propsFile.newDataInputStream())

    String[] versions = props.getProperty("version").split("\\.")
    String subVersionIncremented = (versions[2].toInteger() + 1)

    String snapShotVersion = "${versions[0]}.${versions[1]}.${subVersionIncremented}-SNAPSHOT"

    props.setProperty('version', snapShotVersion)
    props.store(propsFile.newWriter(), null)

    return snapShotVersion
}

task gitRevision {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                workingDir '.'
                commandLine './git-revision.sh'
                standardOutput = os
            }
            ext.result = os.toString().replaceAll("\\n", "")
        }
    }
}

task commitRelease {
    dependsOn gitRevision
    doLast {
        updateVersionProperty(gitRevision.result)
        exec {
            commandLine = "./git-commit.sh"
            args "[Gradle Release] Version update : ${gitRevision.result}"
            println "executing ${commandLine}"
        }
    }
}

task postReleaseCommit {
    dependsOn commitRelease
    doLast {
        String releaseVersion = generateReleaseVersion()
        exec {
            workingDir '.'
            commandLine './git-commit.sh'
            args "[Gradle Release] Snapshot version update : ${releaseVersion}"
        }
        ext.releaseVersion = releaseVersion.replace("-SNAPSHOT", "")
    }
}

task postReleaseTag {
    dependsOn postReleaseCommit
    doLast {
        String releaseVersion = postReleaseCommit.releaseVersion
        exec {
            workingDir '.'
            commandLine './git-tag.sh'
            args "${releaseVersion}"
        }
        ext.releaseVersion = releaseVersion.replace("-SNAPSHOT", "")
    }
}